#include<bits/stdc++.h>
using namespace std;

struct Node{
    int data;
    Node* next;
    Node(int data){
        this->data = data;
        this->next = NULL;
    }
};

struct compare{
    bool operator()(struct Node* a, struct Node* b){
        return a->data > b->data;
    }
};


Node* merge(Node* arr[],int k){
    priority_queue<Node*, vector<Node*>, compare>pq;
    
    //push head of all the ll in pq
    for(int i=0;i<k;i++){
        pq.push(arr[i]);
    }
    
    Node* dummy = new Node(0);
    Node* temp = dummy;
    
    while(!pq.empty()){
        Node* curr = pq.top();
        pq.pop();
        
        temp->next = curr;
        temp = temp->next;
        
        if(curr->next!=NULL)
            pq.push(curr->next);
    }
    return dummy->next;
}

void printLL(Node* head){
    Node* temp = head;
    while(temp!=NULL){
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << endl;
}
int main(){
    int k = 3;//number of LL to merge
    int n = 4; //number of elements in each array
    
    Node* arr[k];
    
    arr[0] = new Node(1);
    arr[0]->next = new Node(3);
    arr[0]->next->next = new Node(5);
    arr[0]->next->next->next = new Node(7);
    
    arr[1] = new Node(2);
    arr[1]->next = new Node(4);
    arr[1]->next->next = new Node(6);
    arr[1]->next->next->next = new Node(8);
    
    arr[2] = new Node(0);
    arr[2]->next = new Node(9);
    arr[2]->next->next = new Node(10);
    arr[2]->next->next->next = new Node(11);
    
    Node* head = merge(arr, k);
    printLL(head);
    
    return 0;
}